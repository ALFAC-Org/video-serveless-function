name: Build and Deploy video_slicer Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'video_slicer/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      BUCKET_FILES_NAME: ${{ secrets.BUCKET_FILES_NAME }}
      LAMBDA_BUCKET_NAME: ${{ secrets.LAMBDA_BUCKET_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        for dir in $(find . -name 'requirements.txt' -exec dirname {} \;); do
          cd "$dir"
          pip install -r requirements.txt -t .
          pip install opencv-python-headless numpy -t .
          cd - # Volta para o diretório anterior
        done

    - name: Find all Python files
      id: find_files
      run: |
        files=$(find . -name '*.py' -not -path '*/venv/*')
        echo "::set-output name=files::$files"

    - name: Zip and upload each file
      run: |
        for file in ${{ steps.find_files.outputs.files }}; do
          dir_name=$(basename $(dirname "$file"))
          zip_name="$dir_name.zip"
          cd "$(dirname "$file")"
          zip -r "$zip_name" . -x "*.git*"
          aws s3 cp "$zip_name" s3://${{ env.LAMBDA_BUCKET_NAME }}/"$zip_name"
          cd - # Volta para o diretório anterior
        done
   
    - name: Update Lambda function code
      run: |
        for file in ${{ steps.find_files.outputs.files }}; do
          dir_name=$(basename $(dirname "$file"))
          zip_name="$dir_name.zip"
          function_name="$dir_name"
          aws lambda update-function-code --function-name "$function_name" --s3-bucket ${{ env.LAMBDA_BUCKET_NAME }} --s3-key "$zip_name"
        done
  
    - name: Wait for Lambda update to complete
      run: sleep 30

    - name: Get URL for TO_PROCESS_QUEUE_URL
      id: get_to_process_queue_url
      run: |
        queue_url=$(aws sqs get-queue-url --queue-name videos_to_process --query 'QueueUrl' --output text)
        echo "::set-output name=to_process_queue_url::$queue_url"

    - name: Get URL for STATUS_QUEUE_URL
      id: get_status_queue_url
      run: |
        queue_url=$(aws sqs get-queue-url --queue-name update_processing_status --query 'QueueUrl' --output text)
        echo "::set-output name=status_queue_url::$queue_url"

    - name: Update Lambda environment variables
      run: |
        for file in ${{ steps.find_files.outputs.files }}; do
          dir_name=$(basename $(dirname "$file"))
          function_name="$dir_name"
          aws lambda update-function-configuration --function-name "$function_name" --environment "Variables={TO_PROCESS_QUEUE_URL=${{ steps.get_to_process_queue_url.outputs.to_process_queue_url }},STATUS_QUEUE_URL=${{ steps.get_status_queue_url.outputs.status_queue_url }},BUCKET_FILES_NAME=${{ env.BUCKET_FILES_NAME }}}"
        done